# bot.py
import os
import asyncio
import logging
import pickle
import numpy as np
import faiss
from collections import defaultdict, deque

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
from google import genai

# ------------ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ------------
logging.basicConfig(level=logging.INFO)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY   = os.getenv("GEMINI_API_KEY")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ—Ç BOT_TOKEN –≤ .env")
if not API_KEY:
    raise ValueError("‚ùå –ù–µ—Ç GEMINI_API_KEY –≤ .env")

bot = Bot(BOT_TOKEN)
dp  = Dispatcher()
client = genai.Client(api_key=API_KEY)

# ------------ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–±–Ω–æ–≤–ª—ë–Ω) ------------
SYSTEM_PROMPT = r"""
–†–û–õ–¨: –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ Telegram-–∫–∞–Ω–∞–ª–∞ ¬´–ö—É–ø–æ–ª—å–Ω—ã–π –¥–æ–º –¥–ª—è –∂–∏–∑–Ω–∏¬ª.

–û–°–ù–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–í–ï–¢–û–í
- –û–ø–∏—Ä–∞–π—Å—è –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –Ω–∏–∂–µ.
- –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø—Ä—è–º–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ (@Kseles).

–°–¢–ò–õ–¨
- –ö—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –ë–µ–∑ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞.
- –°–ø–∏—Å–∫–∏ ‚Äî –∫–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω–æ. –í –∫–æ–Ω—Ü–µ ‚Äî 1 —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.

–ü–†–ê–í–ò–õ–ê –î–ò–ê–õ–û–ì–ê
- –ù–ï –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –≤ /start –∏–ª–∏ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
- –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç ¬´–¥–∞/–æ–∫/–∞–≥–∞/–≤–µ—Ä–Ω–æ/–ø–æ–¥—Ö–æ–¥–∏—Ç¬ª ‚Äî —Å—á–∏—Ç–∞–π —ç—Ç–æ —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ —Ç–≤–æ—ë –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π –±–µ–∑ –ø–µ—Ä–µ—Å–ø—Ä–æ—Å–∞.
- –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–π ‚Äî —É—Ç–æ—á–Ω–∏ –º–∞–∫—Å–∏–º—É–º 1‚Äì2 –¥–µ—Ç–∞–ª–∏.
- –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —Ä–∞—Å—á—ë—Ç/–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è ‚Äî –º—è–≥–∫–æ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å @Kseles.

–§–û–†–ú–ê–¢
- –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç ‚Üí –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—É–Ω–∫—Ç—ã/—à–∞–≥–∏ ‚Üí 1 —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
- –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–∞–∑–∞ ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å ¬´–º–æ–≥—É –ø—Ä–∏—Å–ª–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏¬ª (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑).

–û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π. –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏.
- –ë–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–π –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.
"""

# ------------ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ ------------
YES_WORDS = {"–¥–∞", "–æ–∫", "–∞–≥–∞", "–∫–æ–Ω–µ—á–Ω–æ", "–ø–æ–¥—Ö–æ–¥–∏—Ç", "–≤–µ—Ä–Ω–æ", "—Å–æ–≥–ª–∞—Å–µ–Ω", "—Å–æ–≥–ª–∞—Å–Ω–∞"}
user_state = defaultdict(lambda: {
    "greeted": False,
    "history": deque(maxlen=6),   # [("user", txt), ("assistant", txt), ...]
})

def make_history_text(history):
    if not history:
        return "(–ø—É—Å—Ç–æ)"
    lines = []
    for role, txt in history:
        prefix = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" if role == "user" else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"
        lines.append(f"{prefix} {txt}")
    return "\n".join(lines)

# ------------ RAG: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ ------------
EMBED_MODEL = "text-embedding-004"
GEN_MODEL   = "gemini-2.0-flash"

try:
    INDEX = faiss.read_index("kb.index")
    KB = pickle.load(open("kb.pkl", "rb"))
    DOCS, META = KB["docs"], KB["meta"]
    logging.info("KB loaded: %d chunks", len(DOCS))
    KB_READY = True
except Exception as e:
    logging.warning("KB not loaded (%s). Bot will work –±–µ–∑ –±–∞–∑—ã.", e)
    DOCS, META, INDEX = [], [], None
    KB_READY = False

def _embed(text: str) -> np.ndarray:
    resp = client.models.embed_content(
        model=EMBED_MODEL,
        contents=[{"parts":[{"text": text}]}]
    )
    v = np.array(resp.embeddings[0].values, dtype="float32")
    v /= (np.linalg.norm(v) + 1e-12)
    return v.reshape(1, -1)

def retrieve(query: str, k: int = 5):
    if not KB_READY or INDEX is None or not DOCS:
        return []
    qv = _embed(query)
    D, I = INDEX.search(qv, k)
    hits = []
    for score, idx in zip(D[0], I[0]):
        if idx == -1:
            continue
        hits.append((float(score), DOCS[idx], META[idx]))
    return hits

def extract_text(resp) -> str:
    try:
        parts = resp.candidates[0].content.parts
        texts = []
        for p in parts:
            if hasattr(p, "text") and p.text:
                texts.append(p.text)
        return "\n".join(texts).strip() or "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç–∞."
    except Exception:
        return "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç–∞."

# ------------ —Ö—ç–Ω–¥–ª–µ—Ä—ã ------------
@dp.message(Command("start"))
async def start(message: Message):
    st = user_state[message.from_user.id]
    st["greeted"] = True
    ready = "‚úÖ –±–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞" if KB_READY else "‚ö†Ô∏è –±–∞–∑–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ö—É–ø–æ–ª—å–Ω—ã–π –¥–æ–º –¥–ª—è –∂–∏–∑–Ω–∏¬ª.\n{ready}\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å üôÇ")

@dp.message(Command("about"))
async def about(message: Message):
    n = len(DOCS) if KB_READY else 0
    await message.answer(f"–ú–æ–¥–µ–ª—å: {GEN_MODEL}\nKB chunks: {n}\nRAG: {'on' if KB_READY else 'off'}")

@dp.message()
async def handle_message(message: Message):
    uid = message.from_user.id
    st = user_state[uid]

    query_raw = (message.text or "").strip()
    is_short_yes = query_raw.lower() in YES_WORDS

    # 1) –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
    history_text = make_history_text(st["history"])
    if is_short_yes:
        user_turn = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ç–≤–æ—ë –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∏ —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–Ω—ã–π —à–∞–≥ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è."
        search_query = "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"
    else:
        user_turn = f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query_raw}"
        search_query = query_raw

    # 2) RAG: –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    hits = retrieve(search_query, k=5)
    context = "\n\n".join([h[1] for h in hits]) if hits else "(–∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ—Ç)"

    # 3) –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    full_prompt = (
        SYSTEM_PROMPT
        + "\n\n–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∏):\n"
        + history_text
        + "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n"
        + context
        + "\n\n"
        + user_turn
        + "\n\n–°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º."
    )

    # 4) –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
    try:
        resp = client.models.generate_content(
            model=GEN_MODEL,
            contents=[{"parts":[{"text": full_prompt}]}],
        )
        answer = extract_text(resp)
    except Exception as e:
        answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {e}"

    # 5) –ü–æ–º–µ—Ç–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    if hits:
        sources = ", ".join(sorted({h[2]['source'] for h in hits}))
        answer += f"\n\n[–∏–∑ –±–∞–∑—ã] –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {sources}"
    else:
        answer += "\n\n[–≤–Ω–µ –±–∞–∑—ã] –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

    # 6) –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if query_raw:
        st["history"].append(("user", query_raw))
    st["history"].append(("assistant", answer))

    await message.answer(answer)

# ------------ –∑–∞–ø—É—Å–∫ ------------
async def main():
    await bot.delete_webhook(drop_pending_updates=True)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    logging.info("Starting polling‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
