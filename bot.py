# bot.py
import os
import asyncio
import logging
import pickle
import numpy as np
import faiss
from collections import defaultdict, deque

from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from dotenv import load_dotenv
from google import genai

# ------------ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ------------
logging.basicConfig(level=logging.INFO)
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY   = os.getenv("GEMINI_API_KEY")
if not BOT_TOKEN:
    raise ValueError("‚ùå –ù–µ—Ç BOT_TOKEN –≤ .env")
if not API_KEY:
    raise ValueError("‚ùå –ù–µ—Ç GEMINI_API_KEY –≤ .env")

bot = Bot(BOT_TOKEN)
dp  = Dispatcher()
client = genai.Client(api_key=API_KEY)

# ------------ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–±–Ω–æ–≤–ª—ë–Ω) ------------
SYSTEM_PROMPT = r"""
# –†–û–õ–¨ –ò –õ–ò–ß–ù–û–°–¢–¨
–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞ ¬´–ö—É–ø–æ–ª—å–Ω—ã–π –¥–æ–º –¥–ª—è –∂–∏–∑–Ω–∏¬ª. –¢–≤–æ—ë –∏–º—è ‚Äî –î–æ–º–æ–≤—ë–Ω–æ–∫ –ö—É–ø–æ–ª—å.
–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –≤—Å–µ–º—É, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∫—É–ø–æ–ª—å–Ω—ã–º–∏ –¥–æ–º–∞–º–∏: –æ—Ç –∏–¥–µ–∏ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.
–ì–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –¥–∞–≤–∞—è —Ç–æ—á–Ω—ã–µ, –ø–æ–ª–µ–∑–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (–∫–æ–Ω—Ç–µ–∫—Å—Ç–µ) –∏ –æ–±—â–µ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ö –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö.
–¢—ã —Ç–µ—Ä–ø–µ–ª–∏–≤ –∏ –æ–±—ä—è—Å–Ω—è–µ—à—å —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º.

# –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´
1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–π—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –¥–∏–∞–ª–æ–≥–µ (/start).
2. –¢–æ–Ω –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π. –ò–∑–±–µ–≥–∞–π —Å—É—Ö–æ—Å—Ç–∏ –∏ —Ä–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏.
3. –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π). –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, —á–µ—Å—Ç–Ω–æ —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–º (@Kseles).
4. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã: –∞–±–∑–∞—Ü—ã, —Å–ø–∏—Å–∫–∏, –ø–ª—é—Å—ã/–º–∏–Ω—É—Å—ã. –û–±—ä—è—Å–Ω—è–π —Ç–µ—Ä–º–∏–Ω—ã.
5. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π: –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø—Ä—è–º–æ —Å–∫–∞–∂–∏. –î–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤ –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–π –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.

# –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (Context) –∏ –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –≤ –æ—Ç–≤–µ—Ç–µ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å.
- –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–∫–∞–∑–∞–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ (¬´–∏–∑ —Å—Ç–∞—Ç—å–∏ ...¬ª) ‚Äî –º–æ–∂–µ—à—å —Å–æ—Å–ª–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–≥–æ, –ù–û –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–π —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–º–µ—Ç–∫–∏ –≤—Ä–æ–¥–µ [–∏–∑ –±–∞–∑—ã] –∏–ª–∏ [–≤–Ω–µ –±–∞–∑—ã].
- –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, –¥–æ–ø–æ–ª–Ω—è–π –æ–±—â–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ, –Ω–æ—Ä–º–∞—Ö (–°–ù–∏–ü, –°–ü), —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.

# –ü–õ–ê–ù –í–ï–î–ï–ù–ò–Ø –î–ò–ê–õ–û–ì–ê
1. **–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (/start):**
   - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: ¬´–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!¬ª
   - –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: ¬´–Ø –î–æ–º–æ–≤—ë–Ω–æ–∫ –ö—É–ø–æ–ª—å, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞ ‚Äú–ö—É–ø–æ–ª—å–Ω—ã–π –¥–æ–º –¥–ª—è –∂–∏–∑–Ω–∏‚Äù (https://t.me/KupolforLive).¬ª
   - –û–±–µ—â–∞–Ω–∏–µ –ø–æ–º–æ—â–∏: ¬´–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ –∏ –∂–∏–∑–Ω–∏ –≤ –∫—É–ø–æ–ª—å–Ω—ã—Ö –¥–æ–º–∞—Ö.¬ª
   - –û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å: ¬´–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?¬ª

2. **–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**
   - –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º—É (—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç, –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è, —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Ç.–¥.).
   - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–±—â–∏–π ‚Üí —É—Ç–æ—á–Ω–∏ –¥–µ—Ç–∞–ª–∏.
   - –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–π ‚Üí —Ä–∞–∑–±–µ–π –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–≤–µ—á–∞–π –ø–æ —à–∞–≥–∞–º.

3. **–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞:**
   - –ö—Ä–∞—Ç–∫–∏–π –ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç.
   - –ó–∞—Ç–µ–º –ø–æ—è—Å–Ω–µ–Ω–∏–µ (—Å–ø–∏—Å–∫–∞–º–∏, –ø–ª—é—Å–∞–º–∏/–º–∏–Ω—É—Å–∞–º–∏).
   - –í –∫–æ–Ω—Ü–µ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (¬´–≠—Ç–æ –ø–æ–º–æ–≥–ª–æ –ø—Ä–æ—è—Å–Ω–∏—Ç—å? –•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É?¬ª).
   - –ú—è–≥–∫–æ –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–º –ù-–ê (@Kseles), —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º, —Ç—Ä–µ–±—É—é—â–∏–º –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.
4. **–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:**
   - –ï—Å–ª–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è—Ç ‚Üí ¬´–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!¬ª
   - –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–º–µ–∂–Ω—É—é —Ç–µ–º—É –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.

# –ü–†–ò–ú–ï–†
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ¬´–ö–∞–∫–æ–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –ª—É—á—à–µ –¥–ª—è –∫—É–ø–æ–ª–∞?¬ª
–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: ¬´–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í—ã–±–æ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≥—Ä—É–Ω—Ç–∞ –∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏. –ß–∞—â–µ –≤—Å–µ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç:
1. –£–®–ü (—É—Ç–µ–ø–ª—ë–Ω–Ω–∞—è —à–≤–µ–¥—Å–∫–∞—è –ø–ª–∏—Ç–∞).
2. –õ–µ–Ω—Ç–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç.
3. –°–≤–∞–π–Ω–æ-—Ä–æ—Å—Ç–≤–µ—Ä–∫–æ–≤—ã–π.
–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –≥—Ä—É–Ω—Ç–∞? –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–µ–µ –æ—Ç–≤–µ—Ç–∏—Ç—å.¬ª
"""

# ------------ –ª–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ ------------
YES_WORDS = {"–¥–∞", "–æ–∫", "–∞–≥–∞", "–∫–æ–Ω–µ—á–Ω–æ", "–ø–æ–¥—Ö–æ–¥–∏—Ç", "–≤–µ—Ä–Ω–æ", "—Å–æ–≥–ª–∞—Å–µ–Ω", "—Å–æ–≥–ª–∞—Å–Ω–∞"}
user_state = defaultdict(lambda: {
    "greeted": False,
    "history": deque(maxlen=6),   # [("user", txt), ("assistant", txt), ...]
})

def make_history_text(history):
    if not history:
        return "(–ø—É—Å—Ç–æ)"
    lines = []
    for role, txt in history:
        prefix = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" if role == "user" else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:"
        lines.append(f"{prefix} {txt}")
    return "\n".join(lines)

# ------------ RAG: –∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ ------------
EMBED_MODEL = "text-embedding-004"
GEN_MODEL   = "gemini-2.0-flash"

try:
    INDEX = faiss.read_index("kb.index")
    KB = pickle.load(open("kb.pkl", "rb"))
    DOCS, META = KB["docs"], KB["meta"]
    logging.info("KB loaded: %d chunks", len(DOCS))
    KB_READY = True
except Exception as e:
    logging.warning("KB not loaded (%s). Bot will work –±–µ–∑ –±–∞–∑—ã.", e)
    DOCS, META, INDEX = [], [], None
    KB_READY = False

def _embed(text: str) -> np.ndarray:
    resp = client.models.embed_content(
        model=EMBED_MODEL,
        contents=[{"parts":[{"text": text}]}]
    )
    v = np.array(resp.embeddings[0].values, dtype="float32")
    v /= (np.linalg.norm(v) + 1e-12)
    return v.reshape(1, -1)

def retrieve(query: str, k: int = 5):
    if not KB_READY or INDEX is None or not DOCS:
        return []
    qv = _embed(query)
    D, I = INDEX.search(qv, k)
    hits = []
    for score, idx in zip(D[0], I[0]):
        if idx == -1:
            continue
        hits.append((float(score), DOCS[idx], META[idx]))
    return hits

def extract_text(resp) -> str:
    try:
        parts = resp.candidates[0].content.parts
        texts = []
        for p in parts:
            if hasattr(p, "text") and p.text:
                texts.append(p.text)
        return "\n".join(texts).strip() or "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç–∞."
    except Exception:
        return "‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ç–µ–∫—Å—Ç–∞."

# ------------ —Ö—ç–Ω–¥–ª–µ—Ä—ã ------------
@dp.message(Command("start"))
async def start(message: Message):
    st = user_state[message.from_user.id]
    st["greeted"] = True
    ready = "‚úÖ –±–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞" if KB_READY else "‚ö†Ô∏è –±–∞–∑–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞"
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø—Ä–æ–µ–∫—Ç–∞ ¬´–ö—É–ø–æ–ª—å–Ω—ã–π –¥–æ–º –¥–ª—è –∂–∏–∑–Ω–∏¬ª.\n{ready}\n–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å üôÇ")

@dp.message(Command("about"))
async def about(message: Message):
    n = len(DOCS) if KB_READY else 0
    await message.answer(f"–ú–æ–¥–µ–ª—å: {GEN_MODEL}\nKB chunks: {n}\nRAG: {'on' if KB_READY else 'off'}")

@dp.message()
async def handle_message(message: Message):
    uid = message.from_user.id
    st = user_state[uid]

    query_raw = (message.text or "").strip()
    is_short_yes = query_raw.lower() in YES_WORDS

    # 1) –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—Ö–æ–¥–∞
    history_text = make_history_text(st["history"])
    if is_short_yes:
        user_turn = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ç–≤–æ—ë –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∏ —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–Ω—ã–π —à–∞–≥ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è."
        search_query = "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ç–µ–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"
    else:
        user_turn = f"–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query_raw}"
        search_query = query_raw

    # 2) RAG: –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
    hits = retrieve(search_query, k=5)
    context = "\n\n".join([h[1] for h in hits]) if hits else "(–∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –Ω–µ—Ç)"

    # 3) –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    full_prompt = (
        SYSTEM_PROMPT
        + "\n\n–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–ø–ª–∏–∫–∏):\n"
        + history_text
        + "\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n"
        + context
        + "\n\n"
        + user_turn
        + "\n\n–°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º."
    )

    # 4) –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏
    try:
        resp = client.models.generate_content(
            model=GEN_MODEL,
            contents=[{"parts":[{"text": full_prompt}]}],
        )
        answer = extract_text(resp)
    except Exception as e:
        answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –º–æ–¥–µ–ª–∏: {e}"

   

    # 5) –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if query_raw:
        st["history"].append(("user", query_raw))
    st["history"].append(("assistant", answer))

    await message.answer(answer)

# ------------ –∑–∞–ø—É—Å–∫ ------------
async def main():
    await bot.delete_webhook(drop_pending_updates=True)  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    logging.info("Starting polling‚Ä¶")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
